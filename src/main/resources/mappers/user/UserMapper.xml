<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.attaparunever2.user.UserMapper">
    <insert id="insUserEmailVerification">
        INSERT INTO user_email_verification
        SET user_id = #{userId}
        , token = #{token}
        , expired_date = CURRENT_TIMESTAMP + INTERVAL 30 MINUTE
    </insert>

    <select id="selUserEmailVerificationByUId">
        SELECT A.user_id AS userId, token, expired_date AS expiredDate, A.created_at AS createdAt
        FROM user_email_verification A
        WHERE user_id = (
            SELECT user_id
            FROM user
            WHERE uid = #{UId}
        )
    </select>

    <select id="selUserEmailVerificationByUserId">
        SELECT user_id AS userId, token, expired_date AS expiredDate, created_at  AS createdAt
        FROM user_email_verification
        WHERE user_id = #{userId}
    </select>

    <delete id="delUserEmailVerification">
        DELETE FROM user_email_verification
        WHERE user_id = #{userId}
    </delete>

    <insert id="insUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO user
        SET uid = #{uid}
        , company_id = #{companyId}
        , role_id = 'ROLE_USER'
        , upw = #{upw}
        , name = #{name}
        <if test="pic != null">
            , pic = #{pic}
        </if>
        , email = #{email}
        , phone = #{phone}
    </insert>

    <select id="selUserByUid">
        SELECT A.user_id AS userId,  B.name AS companyName
        , A.company_id AS companyId
        , A.role_id AS roleId
        , A.uid, A.upw, A.name, A.pic
        , A.email, A.phone, A.point
        FROM user A INNER JOIN company B
        ON A.company_id = B.company_id
        WHERE A.uid = #{id}
    </select>

    <select id="selUserByUserId">
        SELECT A.user_id AS userId,  B.name AS companyName
        , A.company_id AS companyId
        , A.role_id AS roleId
        , A.uid, A.upw, A.name, A.pic
        , A.email, A.phone, A.point
        FROM user A INNER JOIN company B
        ON A.company_id = B.company_id
        WHERE A.user_id = #{userId}
    </select>

    <select id="selUserByEmailAndName">
        SELECT A.user_id AS userId,  B.name AS companyName
        , A.company_id AS companyId
        , A.role_id AS roleId
        , A.uid, A.upw, A.name, A.pic
        , A.email, A.phone, A.point
        FROM user A INNER JOIN company B
        ON A.company_id = B.company_id
        WHERE A.email = #{email}
        AND A.name = #{name}
    </select>

    <delete id="delUser">
        DELETE FROM user
        WHERE user_id = #{userId}
    </delete>

    <select id="selUserPastOrderCheck">
        SELECT C.restaurant_name AS restaurantName, D.file_path AS filePath, A.reservation_yn AS reservationYn
             , GROUP_CONCAT(DISTINCT F.menu_name SEPARATOR ', ') AS menuName, SUM(E.menu_count * F.price) AS menuTotalPrice
             , E.menu_count AS menuCount
             , A.created_at AS createdAt
          FROM `order` A
         INNER JOIN restaurant C
            ON A.restaurant_id = C.restaurant_id
          LEFT JOIN restaurant_pic D
            ON C.restaurant_id = D.restaurant_id
         INNER JOIN order_detail E
            ON A.order_id = E.order_id
         INNER JOIN restaurant_menu F
            ON E.menu_id = F.menu_id
         WHERE A.user_id = #{userId}
         GROUP BY A.order_id;
    </select>
</mapper>